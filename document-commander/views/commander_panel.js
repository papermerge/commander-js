import { PanelView } from "./panel/index";
import { BreadcrumbView } from "./breadcrumb";
import { Collection } from "../lib/collection";
import { View } from "../lib/view";
import { Panel } from "../models/index";
import { Breadcrumb } from "../models/breadcrumb";
import { fetch_children } from "../requests";

import {
    EV_DOCUMENT_CLICKED,
    EV_FOLDER_CLICKED
} from "../events";


class CommanderPanelView extends View {

    constructor({
        nodes=new Collection(),
        parent=undefined,
        ancestors=new Collection(),
        options={}
    }) {
        super();
        this.panel_model = new Panel({ nodes, parent });
        this.panel_view = new PanelView({
            model: this.panel_model,
            options: options['panel']
        });
        this.breadcrumb_model = new Breadcrumb(ancestors);
        this.breadcrumb_view = new BreadcrumbView({
            breadcrumb: this.breadcrumb_model,
            options: options['breadcrumb']
        });
        this.options = options;

        // when a node is added, panel will be re-rendered 
        this.panel_model.on("change", this.render_panel, this);
        this.breadcrumb_model.on("change", this.render_breadcrumb, this);
        // events generated by user
        this.panel_view.on(EV_FOLDER_CLICKED, this.folder_clicked, this);
        this.panel_view.on(EV_DOCUMENT_CLICKED, this.document_clicked, this);
    }

    folder_clicked(folder) {
        let that = this;

        fetch_children(folder).then(({nodes, ancestors}) => {
            that.panel_model.reset({nodes, ancestors});
            that.breadcrumb_model.reset(ancestors);
        });
    }

    document_clicked(doc) {
        // Panel does not know (and rightfully so)
        // what to do when document was clicked. Just
        // inform interested parties.
        this.trigger(EV_DOCUMENT_CLICKED, doc);
    }

    render_panel() {
        this.panel_view.render()
    }

    render_breadcrumb() {
        this.breadcrumb_view.render();
    }

    add(item_or_items) {
        this.panel_model.add(item_or_items);
    }

}

export { CommanderPanelView };